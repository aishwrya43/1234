                                                    PACKAGES
------------------------------------------------------------------------------------------------------------------------------------------~~~CREATE PACKAGE
create or replace package emp_pack as
procedure getEmpInfo(p_empno emp.empno%type);


function getSal(p_empno emp.empno%type) return number;
end;
------------------------------------------------------------------------------------------------------------------------------------------~~CREATE PACKAGE BODY

create or replace package body emp_pack as
procedure getEmpInfo(p_empno emp.empno%type) as
v_ename emp.ename%type;
begin
select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename= ' ||v_ename);

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;

function getSal(p_empno emp.empno%type) return number as
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal= ' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;
end;
/
-------------------------------------------------------------------------------------------------------------------------------------
~~EXECUTION
execute emp_pack.getEmpInfo(7788);
---------------------------------------------------------------------------------------------------------------------------------------
execution

declare
v_forSal emp.sal%type;
begin
v_forSal :=emp_pack.getSal(7788);
dbms_output.put_line(' sal from callers= ' ||v_forSal);
end;
--------------------------------------------------------------------------------------------------------
~~CREATE PACKAGE
create or replace package emp_pack as
procedure getEmpInfo(p_empno emp.empno%type);


function getSal(p_empno emp.empno%type) return number;
end;

------------------------------------------------------------------------
~~CREATE PACKAGE BODY  check

create or replace package body emp_pack as
procedure pri_proc as
begin
dbms_output.put_line(' in private proc pri_proc' );
end;

procedure getEmpInfo(p_empno emp.empno%type) as
v_ename emp.ename%type;
begin
pri_proc;
select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename= ' ||v_ename);

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;

function getSal(p_empno emp.empno%type) return number as
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal= ' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;
end;
/

declare

---------------------------------------------------------------------------------------
create or replace package emp_pack as
g_var number:=100;
procedure getEmpInfo(p_empno emp.empno%type);
function getSal(p_empno emp.empno%type) return number;
end;
----------------------------------------------------------------------------------------
create or replace package body emp_pack as
pri_var number:=11;
procedure pri_proc as
begin
dbms_output.put_line(' in private proc pri_proc' );
end;
procedure getEmpInfo(p_empno emp.empno%type) as
v_ename emp.ename%type;
begin
pri_proc;
select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename= ' ||v_ename);

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;

function getSal(p_empno emp.empno%type) return number as
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal= ' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;
end;
/

--------------------------------------------------------------------------------------------------------
~~EXECUTION
begin
dbms_output.put_line('global value= '||emp_pack.g_var);
end;
/
---------------------------------------------------------------------------------------------------
~~~PACKAGE
create or replace package emp_pack as
g_var number:=100;
procedure getEmpInfo(p_empno emp.empno%type);
function getSal(p_empno emp.empno%type) return number;
end;

------------------------------------------------------------------------------------------
~~~PACKAGE BODY

create or replace package body emp_pack as
pri_var number:=100;
procedure pri_proc as
begin
dbms_output.put_line(' in private proc pri_proc' );
end;
procedure getEmpInfo(p_empno emp.empno%type) as
v_ename emp.ename%type;
begin
pri_proc;
select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getEmpInfo proc ename= ' ||v_ename);

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;

function getSal(p_empno emp.empno%type) return number as
v_sal emp.sal%type;
begin
select sal into v_sal from emp where empno=p_empno;
dbms_output.put_line('from getSal function sal= ' ||v_sal);
return v_sal;

exception
when no_data_found then
dbms_output.put_line(' invalid empno');
end;

begin
dbms_output.put_line(' initialization ');
g_var:=1;
end;
/

----------------------------------------------------------------------------------------------------------------------------------------
EXECUTION:
 execute emp_pack.getEmpInfo(7788);
------------------------------------------------------------------------------------------------------------------------------------------
create or replace package operations as

function add(var1 number, var2 number) return number;

function add(var1 number, var2 number, var3 number) return number;
end;

--------------------------------------------------------
create or replace package body operations as

function add(var1 number, var2 number) return number as
result number;
begin
result:= var1+var2;
dbms_output.put_line('add with 2 para result= ' ||result);
return result;
end;


function add(var1 number, var2 number, var3 number) return number as
result number;
begin
result:= var1+var2 +var3;
dbms_output.put_line('add with 3 para result= ' ||result);
return result;
end;
end;
/

-----------------------------------
declare
res number;
begin
res:=operations.add(10,20);
dbms_output.put_line('res= '||res);
res:=operations.add(10,20,30);
dbms_output.put_line('res= '||res);
end;
/
------------------------------------------------



